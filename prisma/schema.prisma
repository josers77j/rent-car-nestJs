generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VehicleType {
  sedan
  suv
  truck
  van
  motorcycle
}

enum VehicleStatus {
  available
  rented
  maintenance
  out_of_service
}

enum RentalStatus {
  active
  completed
  cancelled
}

enum PaymentStatus {
  pending
  paid
  partially_paid
  refunded
}

enum MaintenanceType {
  routine
  repair
  inspection
}

enum IdentificationType {
  dni
  passport
  driver_license
}

enum PaymentMethod {
  cash
  credit_card
  debit_card
  bank_transfer
  paypal
}

model Role {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdBy   Int?
  modifiedBy  Int?
  deletedBy   Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  deletedAt   DateTime?

  users           User[]
  permissions     RolePermission[]
  createdByUser   User? @relation("RoleCreatedBy", fields: [createdBy], references: [id])
  modifiedByUser  User? @relation("RoleModifiedBy", fields: [modifiedBy], references: [id])
  deletedByUser   User? @relation("RoleDeletedBy", fields: [deletedBy], references: [id])
}

model User {
  id       Int     @id @default(autoincrement())
  name     String
  email    String  @unique
  password String
  roleId   Int?

  role Role? @relation(fields: [roleId], references: [id], onDelete: SetNull)

  createdBy   String?
  modifiedBy  String?
  deletedBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  deletedAt   DateTime?

  // Relaciones con otros modelos
  createdCustomers     Customer[]    @relation("CustomerCreatedBy")
  modifiedCustomers    Customer[]    @relation("CustomerModifiedBy")
  deletedCustomers     Customer[]    @relation("CustomerDeletedBy")

  createdVehicles      Vehicle[]     @relation("VehicleCreatedBy")
  modifiedVehicles     Vehicle[]     @relation("VehicleModifiedBy")
  deletedVehicles      Vehicle[]     @relation("VehicleDeletedBy")

  createdRentals       Rental[]      @relation("RentalCreatedBy")
  modifiedRentals      Rental[]      @relation("RentalModifiedBy")
  deletedRentals       Rental[]      @relation("RentalDeletedBy")

  createdPayments      Payment[]     @relation("PaymentCreatedBy")
  modifiedPayments     Payment[]     @relation("PaymentModifiedBy")
  deletedPayments      Payment[]     @relation("PaymentDeletedBy")

  createdMaintenance   Maintenance[] @relation("MaintenanceCreatedBy")
  modifiedMaintenance  Maintenance[] @relation("MaintenanceModifiedBy")
  deletedMaintenance   Maintenance[] @relation("MaintenanceDeletedBy")

  createdRoles     Role[]            @relation("RoleCreatedBy")
  modifiedRoles    Role[]            @relation("RoleModifiedBy")
  deletedRoles     Role[]            @relation("RoleDeletedBy")

  createdPermissions   Permission[]  @relation("PermissionCreatedBy")
  modifiedPermissions  Permission[]  @relation("PermissionModifiedBy")
  deletedPermissions   Permission[]  @relation("PermissionDeletedBy")

   // Relaciones con Company
  createdCompanies   Company[]        @relation("CompanyCreatedBy")
  modifiedCompanies  Company[]        @relation("CompanyModifiedBy")
  deletedCompanies   Company[]        @relation("CompanyDeletedBy")

  // Relaciones con Branch
  createdBranches      Branch[]      @relation("BranchCreatedBy")
  modifiedBranches     Branch[]      @relation("BranchModifiedBy")
  deletedBranches      Branch[]      @relation("BranchDeletedBy")

}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdBy   Int?
  modifiedBy  Int?
  deletedBy   Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  deletedAt   DateTime?

  roles             RolePermission[]
  createdByUser     User? @relation("PermissionCreatedBy", fields: [createdBy], references: [id])
  modifiedByUser    User? @relation("PermissionModifiedBy", fields: [modifiedBy], references: [id])
  deletedByUser     User? @relation("PermissionDeletedBy", fields: [deletedBy], references: [id])
}

model RolePermission {
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

model Customer {
  id                 Int               @id @default(autoincrement())
  name               String
  phone              String?
  email              String?
  address            String?
  identification     String
  identificationType IdentificationType
  createdBy          Int?
  modifiedBy         Int?
  deletedBy          Int?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now())
  deletedAt          DateTime?

  createdByUser      User?             @relation("CustomerCreatedBy", fields: [createdBy], references: [id])
  modifiedByUser     User?             @relation("CustomerModifiedBy", fields: [modifiedBy], references: [id])
  deletedByUser      User?             @relation("CustomerDeletedBy", fields: [deletedBy], references: [id])

  rentals            Rental[]
}

model Vehicle {
  id             Int          @id @default(autoincrement())
  brand          String
  model          String
  year           Int
  plateNumber    String       @unique
  type           VehicleType
  status         VehicleStatus
  dailyRate      Float
  createdBy      Int?
  modifiedBy     Int?
  deletedBy      Int?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  deletedAt      DateTime?

  companyId      Int?
  company        Company?      @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdByUser  User?        @relation("VehicleCreatedBy", fields: [createdBy], references: [id])
  modifiedByUser User?        @relation("VehicleModifiedBy", fields: [modifiedBy], references: [id])
  deletedByUser  User?        @relation("VehicleDeletedBy", fields: [deletedBy], references: [id])

  rentals        Rental[]
  maintenance    Maintenance[]
}

model Rental {
  id             Int          @id @default(autoincrement())
  customerId     Int
  vehicleId      Int
  startDate      DateTime
  endDate        DateTime
  totalPrice     Float
  status         RentalStatus
  paymentStatus  PaymentStatus
  createdBy      Int?
  modifiedBy     Int?
  deletedBy      Int?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  deletedAt      DateTime?

  customer       Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  vehicle        Vehicle      @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  createdByUser  User?        @relation("RentalCreatedBy", fields: [createdBy], references: [id])
  modifiedByUser User?        @relation("RentalModifiedBy", fields: [modifiedBy], references: [id])
  deletedByUser  User?        @relation("RentalDeletedBy", fields: [deletedBy], references: [id])

  payments       Payment[]
}

model Maintenance {
  id             Int            @id @default(autoincrement())
  vehicleId      Int
  description    String?
  type           MaintenanceType
  startDate      DateTime
  endDate        DateTime
  cost           Float
  createdBy      Int?
  modifiedBy     Int?
  deletedBy      Int?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now())
  deletedAt      DateTime?

  vehicle        Vehicle        @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  createdByUser  User?          @relation("MaintenanceCreatedBy", fields: [createdBy], references: [id])
  modifiedByUser User?          @relation("MaintenanceModifiedBy", fields: [modifiedBy], references: [id])
  deletedByUser  User?          @relation("MaintenanceDeletedBy", fields: [deletedBy], references: [id])
}

model Payment {
  id             Int          @id @default(autoincrement())
  rentalId       Int
  amount         Float
  paymentMethod  PaymentMethod
  paymentDate    DateTime
  createdBy      Int?
  modifiedBy     Int?
  deletedBy      Int?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  deletedAt      DateTime?

  rental         Rental       @relation(fields: [rentalId], references: [id], onDelete: Cascade)

  createdByUser  User?        @relation("PaymentCreatedBy", fields: [createdBy], references: [id])
  modifiedByUser User?        @relation("PaymentModifiedBy", fields: [modifiedBy], references: [id])
  deletedByUser  User?        @relation("PaymentDeletedBy", fields: [deletedBy], references: [id])

}
model Company {
  id             Int       @id @default(autoincrement())
  name           String
  registrationNo String    @unique
  classification String
  phone          String
  address        String
  email          String?
  website        String?

  createdBy      Int?
  modifiedBy     Int?
  deletedBy      Int?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())
  deletedAt      DateTime?

  // User relations
  createdByUser  User? @relation("CompanyCreatedBy", fields: [createdBy], references: [id], onDelete: SetNull)
  modifiedByUser User? @relation("CompanyModifiedBy", fields: [modifiedBy], references: [id], onDelete: SetNull)
  deletedByUser  User? @relation("CompanyDeletedBy", fields: [deletedBy], references: [id], onDelete: SetNull)

  // Branches and vehicles relations
  branches       Branch[] 
  Vehicles       Vehicle[]
}

model Branch {
  id             Int       @id @default(autoincrement())
  state          String
  city           String
  district       String

  companyId      Int
  company        Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdBy      Int?
  modifiedBy     Int?
  deletedBy      Int?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())
  deletedAt      DateTime?

  // User relations
  createdByUser  User? @relation("BranchCreatedBy", fields: [createdBy], references: [id], onDelete: SetNull)
  modifiedByUser User? @relation("BranchModifiedBy", fields: [modifiedBy], references: [id], onDelete: SetNull)
  deletedByUser  User? @relation("BranchDeletedBy", fields: [deletedBy], references: [id], onDelete: SetNull)
}
